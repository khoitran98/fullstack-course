{"ast":null,"code":"var _jsxFileName = \"/Users/trandangkhoi/fullstack/part1/unicafe/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Statistic = props => {\n  // ...\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }, \" \", props.text, \" \"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  }, \" \", props.value, \" \"));\n};\n\nconst Button = props => /*#__PURE__*/React.createElement(\"button\", {\n  onClick: props.handleClick,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 3\n  }\n}, props.text);\n\nconst Statistics = props => {\n  // ...\n  if (props.all == 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }, \" Feedback not given \");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Statistic, {\n    text: \"good\",\n    value: props.good,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"neutral\",\n    value: props.neutral,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"bad\",\n    value: props.bad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"all\",\n    value: props.all,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"positive\",\n    value: props.positive + \"%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"average\",\n    value: props.average,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }))));\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [all, setAll] = useState(0);\n  const [positive, setPositive] = useState(0);\n  const [average, setAverage] = useState(0);\n\n  const handleGood = () => {\n    setGood(good + 1);\n    setAll(good + bad + neutral + 1);\n    setAverage((good + 1 - bad) / (all + 1));\n    setPositive((good + 1) / (all + 1) * 100);\n  };\n\n  const handleNeutral = () => {\n    setNeutral(neutral + 1);\n    setAll(good + bad + neutral + 1);\n    setAverage((good - bad) / (all + 1));\n    setPositive(good / (all + 1) * 100);\n  };\n\n  const handleBad = () => {\n    setBad(bad + 1);\n    setAll(good + bad + neutral + 1);\n    setAverage((good - bad - 1) / (all + 1));\n    setPositive(good / (all + 1) * 100);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, \" give feedback\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    handleClick: handleGood,\n    text: \"good\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    handleClick: handleBad,\n    text: \"bad\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    handleClick: handleNeutral,\n    text: \"neutral\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \" statistics \"), /*#__PURE__*/React.createElement(Statistics, {\n    good: good,\n    bad: bad,\n    neutral: neutral,\n    average: average,\n    positive: positive,\n    all: all,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/trandangkhoi/fullstack/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Statistic","props","text","value","Button","handleClick","Statistics","all","good","neutral","bad","positive","average","App","setGood","setNeutral","setBad","setAll","setPositive","setAverage","handleGood","handleNeutral","handleBad","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Statistic = (props) => {\n  // ...\n  return(\n    <tr>\n        <td> {props.text} </td>\n        <td> {props.value} </td>\n    </tr>\n  )\n}\nconst Button = (props) => (\n  <button onClick={props.handleClick}>\n    {props.text}\n  </button>\n)\nconst Statistics = (props) => {\n  // ...\n  if (props.all == 0) {\n    return (\n      <div> Feedback not given </div>\n    )\n  }\n  return(\n    <div>\n      <table>\n        <tbody>\n      <Statistic text=\"good\" value = {props.good} />\n      <Statistic text=\"neutral\" value = {props.neutral} />\n      <Statistic text=\"bad\" value = {props.bad} />\n      <Statistic text=\"all\" value = {props.all} />\n      <Statistic text=\"positive\" value = {props.positive + \"%\"} />\n      <Statistic text=\"average\" value = {props.average} />\n        </tbody>\n      </table>\n    </div>\n  )\n}\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const [all, setAll] = useState(0)\n  const [positive, setPositive] = useState(0)\n  const [average, setAverage] = useState(0)\n  const handleGood = () =>\n  {\n    setGood(good + 1)\n    setAll(good + bad + neutral + 1)\n    setAverage((good + 1 - bad)/(all + 1))\n    setPositive((good + 1)/(all + 1) * 100)\n  }\n  const handleNeutral = () =>\n  {\n    setNeutral(neutral + 1)\n    setAll(good + bad + neutral + 1)\n    setAverage((good - bad)/(all + 1))\n    setPositive(good/(all + 1) * 100)\n  }\n\n  const handleBad = () =>\n  {\n    setBad(bad + 1)\n    setAll(good + bad + neutral + 1)\n    setAverage((good - bad - 1)/(all + 1))\n    setPositive(good/(all + 1) * 100)\n  }\n\n  return (\n    <div>\n      <h1> give feedback</h1>\n      <div>\n      <Button handleClick = {handleGood} text=\"good\" />\n      <Button handleClick = {handleBad} text=\"bad\"/>\n      <Button handleClick = {handleNeutral} text =\"neutral\" />\n      </div>\n      <h1> statistics </h1>\n      <Statistics good = {good} bad = {bad} neutral = {neutral} average = {average} positive = {positive} all = {all}/>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)"]},"metadata":{},"sourceType":"module"}